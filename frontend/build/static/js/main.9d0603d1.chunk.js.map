{"version":3,"sources":["components/table/index.js","components/app/index.js","index.js"],"names":["Table","props","react_default","a","createElement","data","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","active","category","Success","Failure","Other","showLogs","handleClick","bind","assertThisInitialized","toggleLogs","intervalId","endpoint","failureCodes","socket","socketIOClient","_this2","on","point","setState","concat","helper","status","ret","newObj","objectSpread","close","togglePolling","e","console","log","preventDefault","fetch","slice","map","idx","key","timestamp","type","Math","round","length","react_easy_chart_lib","labels","calculatePercentage","value","color","_this3","_this$state","className","onClick","components_table","renderGraph","Component","document","addEventListener","root","querySelector","ReactDOM","render","components_app"],"mappings":"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","file":"static/js/main.9d0603d1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\nconst Table = props => (\n  <table>\n    <tbody>\n      <tr>\n        <th> Success (200 response) </th>\n        <th> Failure (500 Response) </th>\n        <th> Other </th>\n      </tr>\n      <tr>\n        <td> {props.data[\"Success\"]} </td>\n        <td> {props.data[\"Failure\"]} </td>\n        <td> {props.data[\"Other\"]} </td>\n      </tr>\n    </tbody>\n  </table>\n);\n\nexport default Table;\n","import React, { Component } from \"react\";\nimport \"./index.css\";\nimport Table from \"../table\";\nimport socketIOClient from \"socket.io-client\";\nimport { PieChart } from \"react-easy-chart\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: false,\n      data: [],\n      category: {\n        Success: 0,\n        Failure: 0,\n        Other: 0\n      },\n      showLogs: false\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.toggleLogs = this.toggleLogs.bind(this);\n    this.intervalId = null;\n    this.endpoint = \"/api/health-check\";\n    this.failureCodes = [500];\n    this.socket = socketIOClient(\"http://localhost:5000\");\n  }\n\n  componentDidMount() {\n    this.socket.on(\"dataPoint\", point =>\n      this.setState({\n        data: this.state.data.concat(point),\n        category: this.helper(point.status)\n      })\n    );\n  }\n\n  reset() {}\n\n  helper(status) {\n    //determine which category to place response\n\n    let ret;\n    let newObj;\n    if (status == 200) {\n      ret = \"Success\";\n    } else if (status == 500) {\n      ret = \"Failure\";\n    } else {\n      ret = \"Other\";\n    }\n    newObj = { ...this.state.category };\n    newObj[ret] += 1;\n    return newObj;\n  }\n\n  componentWillUnmount() {\n    this.socket.close();\n    this.setState({ active: false });\n    this.togglePolling();\n  }\n\n  handleClick(e) {\n    console.log(\"clicked\");\n    e.preventDefault();\n\n    this.togglePolling();\n\n    this.setState({ active: !this.state.active });\n  }\n\n  togglePolling() {\n    // Start/Stop polling depending on current status\n    fetch(`http://localhost:5000${this.endpoint}/?active=${this.state.active}`);\n  }\n\n  toggleLogs() {\n    return (\n      <ul>\n        {this.state.data.slice(-10).map((point, idx) => (\n          <li key={idx}>\n            <span> {point.timestamp}</span>\n            <span> {point.status} </span>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  calculatePercentage(type) {\n    return Math.round(this.state.category[type] / this.state.data.length * 100);\n  }\n\n  renderGraph() {\n    return (\n      <PieChart\n        labels\n        data={[\n          {\n            key: `Success ${this.calculatePercentage(\"Success\")}%`,\n            value: `${this.state.category[\"Success\"]}`,\n            color: \"#E38627\"\n          },\n          {\n            key: `Failure ${this.calculatePercentage(\"Failure\")}%`,\n            value: `${this.state.category[\"Failure\"]}`,\n            color: \"#C13C37\"\n          },\n          {\n            key: `Other ${this.calculatePercentage(\"Other\")}%`,\n            value: `${this.state.category[\"Other\"]}`,\n            color: \"#6A2135\"\n          }\n        ]}\n      />\n    );\n  }\n\n  render() {\n    const { active, data, category } = this.state;\n    console.log(this.state);\n    return (\n      <div className=\"container\">\n        <div className=\"side-container\">\n          <button onClick={this.handleClick}>\n            {\" \"}\n            {active == false ? \"Start\" : \"Pause\"} Health Check{\" \"}\n          </button>\n          <button\n            onClick={() => this.setState({ showLogs: !this.state.showLogs })}\n          >\n            {\" \"}\n            Show Rolling Logs{\" \"}\n          </button>\n        </div>\n        {this.state.showLogs ? this.toggleLogs() : null}\n        <Table data={category} />\n\n        {this.state.data.length > 0 ? this.renderGraph() : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const root = document.querySelector(\"#root\");\n  ReactDOM.render(<App />, root);\n});\n"],"sourceRoot":""}